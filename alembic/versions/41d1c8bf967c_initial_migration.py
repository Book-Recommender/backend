"""
initial migration.

Revision ID: 41d1c8bf967c
Revises:
Create Date: 2024-11-20 17:57:39.826610

"""

from collections.abc import Sequence

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "41d1c8bf967c"
down_revision: str | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade Function."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "author",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_author_name", "author", ["name"], unique=False)
    op.create_table(
        "book",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("isbn", sa.String(), nullable=False, unique=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_book_title", "book", ["title"], unique=False)
    op.create_table(
        "user",
        sa.Column("id", sa.String(), autoincrement=True, nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "author_book",
        sa.Column("book_id", sa.Integer(), nullable=False),
        sa.Column("author_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["author_id"],
            ["author.id"],
        ),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["book.id"],
        ),
        sa.PrimaryKeyConstraint("book_id", "author_id"),
    )
    op.create_table(
        "user_book",
        sa.Column("book_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=False),
        sa.Column("status", sa.Enum("RECOMMENDED", "READING", "COMPLETED", name="bookstatus"), nullable=False),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["book.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("book_id", "user_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade Function."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_book")
    op.drop_table("author_book")
    op.drop_table("user")
    op.drop_index("idx_book_title", table_name="book")
    op.drop_table("book")
    op.drop_index("idx_author_name", table_name="author")
    op.drop_table("author")
    # ### end Alembic commands ###
